knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/jroger/Documents/SPrOut/gene_expression_outlier_accuracy/")
library(readr)
problematic_outliers <- read_tsv("/Users/jroger/Documents/SPrOut/gene_expression_outlier_accuracy/bulk_processing/2020_09_29/outlier_probability_output_CKCC_2020_09_28_problematic.tsv.gz")
TH02_0082_S01_AQP4 <- read_tsv("/Users/jroger/Documents/SPrOut/gene_expression_outlier_accuracy/bulk_processing/results/CKCC_outlier_lead_accuracy.results.2020_07_17/TH02_0082_S01/sample_TH02_0082_S01_gene_AQP4_summary.tsv")
pge <- read_tsv("/Users/jroger/Documents/SPrOut/gene_expression_outlier_accuracy/accuracy_calculation/data/in/per_gene_expression.tsv.gz")
View(pge)
seq(2, 46, 4)
library(tidyverse)
library(dplyr)
library(tidyr)
library(janitor)
install.packages("janitor")
library(tidyverse)
library(dplyr)
library(tidyr)
library(janitor)
pge <- read_tsv("/Users/jroger/Documents/SPrOut/gene_expression_outlier_accuracy/accuracy_calculation/data/in/per_gene_expression.tsv.gz")
ggplot(pge, aes(x=effective_gene_length)) +
geom_histogram() +
xlim(0, 10000) +
ggtitle("Distribution of gene lengths")
# Percentiles
quantile(pge$effective_gene_length, probs = seq(0, 1, by= 0.1))
# Accuracies
length_bins <- c(0, 100, 250, 400, 600, 900, 1200, 1500, 2000, 3000, 4000)
length_bins_all <- c("0-100",
"100-250",
"250-400",
"400-600",
"600-900",
"900-1200",
"1200-1500",
"1500-2000",
"2000-3000",
"3000-4000",
"4000+")
pgea <- pge %>%
dplyr::filter(f_expression_at_max_depth_Gt0) %>%
mutate(within1=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.01,
within5=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.05,
within10=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.10,
within25=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.25,
within50=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.50,
length_bin = length_bins_all[findInterval(effective_gene_length, length_bins)],
lb = length_bins[findInterval(effective_gene_length, length_bins)])
# Plot accuracies
pgea_fractions <- pgea %>%
group_by(length_bin, lb) %>%
summarize(n=n(),
frac1=sum(within1)/n(),
frac5=sum(within5)/n(),
frac10=sum(within10)/n(),
frac25=sum(within25)/n(),
frac50=sum(within50)/n())
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin")
View(frac1)
library(tidyverse)
library(dplyr)
library(tidyr)
library(janitor)
pge <- read_tsv("/Users/jroger/Documents/SPrOut/gene_expression_outlier_accuracy/accuracy_calculation/data/in/per_gene_expression.tsv.gz")
# Histogram of distribution
ggplot(pge, aes(x=effective_gene_length)) +
geom_histogram() +
xlim(0, 10000) +
ggtitle("Distribution of gene lengths")
# Percentiles
quantile(pge$effective_gene_length, probs = seq(0, 1, by= 0.1))
# Accuracies
length_bins <- c(0, 100, 250, 400, 600, 900, 1200, 1500, 2000, 3000, 4000)
length_bins_all <- c("0-100",
"100-250",
"250-400",
"400-600",
"600-900",
"900-1200",
"1200-1500",
"1500-2000",
"2000-3000",
"3000-4000",
"4000+")
pgea <- pge %>%
dplyr::filter(f_expression_at_max_depth_Gt0) %>%
mutate(within1=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.01,
within5=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.05,
within10=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.10,
within25=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.25,
within50=(abs(expression-expression_at_max_depth)/expression_at_max_depth)<=0.50,
length_bin = length_bins_all[findInterval(effective_gene_length, length_bins)],
lb = length_bins[findInterval(effective_gene_length, length_bins)])
# Plot accuracies
pgea_fractions <- pgea %>%
group_by(length_bin, lb) %>%
summarize(n=n(),
frac1=sum(within1)/n(),
frac5=sum(within5)/n(),
frac10=sum(within10)/n(),
frac25=sum(within25)/n(),
frac50=sum(within50)/n())
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin")
View(pgea_fractions)
pgea_fractions$frac50[9] - pgea_fractions$frac50[1]
vdist1 <- pgea_fractions$frac1[9] - pgea_fractions$frac1[1]
vdist5 <- pgea_fractions$frac5[9] - pgea_fractions$frac5[1]
vdist10 <- pgea_fractions$frac10[9] - pgea_fractions$frac10[1]
vdist25 <- pgea_fractions$frac25[9] - pgea_fractions$frac25[1]
vdist50 <- pgea_fractions$frac50[9] - pgea_fractions$frac50[1]
vdist1/6
lbs1 <- seq(pgea_fractions$frac1[1],pgea_fractions$frac1[9], vdist1/6)
lbs1
lbs1 <- seq(pgea_fractions$frac1[1],pgea_fractions$frac1[9], vdist1/6)
lbs5 <- seq(pgea_fractions$frac5[1],pgea_fractions$frac5[9], vdist5/6)
lbs10 <- seq(pgea_fractions$frac10[1],pgea_fractions$frac10[9], vdist10/6)
lbs25 <- seq(pgea_fractions$frac25[1],pgea_fractions$frac25[9], vdist25/6)
lbs50 <- seq(pgea_fractions$frac50[1],pgea_fractions$frac50[9], vdist50/6)
lbs50
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin") +
geom_hline(lbs1)
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin") +
geom_hline(yintercept=lbs1)
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin") +
geom_hline(yintercept=lbs1, color = "red")
# Plot lines from within 10 (middle ground) to see where length bin boundaries should be
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac1)) +
geom_line(aes(y=frac5)) +
geom_line(aes(y=frac10)) +
geom_line(aes(y=frac25)) +
geom_line(aes(y=frac50)) +
ggtitle("Accuracies by gene bin") +
geom_hline(yintercept=lbs10, color = "red")
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac10)) +
ggtitle("Accuracies by gene bin") +
geom_hline(yintercept=lbs10, color = "red")
vdist10 <- pgea_fractions$frac10[9] - pgea_fractions$frac10[1]
# Divide by 4 and find corresponding length bin for each boundary
lbs10 <- seq(pgea_fractions$frac10[1],pgea_fractions$frac10[9], vdist10/4)
ggplot(pgea_fractions, aes(x=lb)) +
geom_line(aes(y=frac10)) +
ggtitle("Accuracies by gene bin") +
geom_hline(yintercept=lbs10, color = "red")
knitr::opts_chunk$set(echo = TRUE)
# Make bins
expression_bin_boundaries <- c(0, 1, 3, 5, 7, 10, 20)
mend_depth_bin_boundaries <- c(0, seq(2, 46, 4), Inf)*1E6
length_bin_boundaries <- c(0, 100, 450, 800, 1500, 4000, Inf)
make_bin_names <- function(boundaries = 1:10){
raw_names <- paste0(boundaries, "-", lead(boundaries)) %>% str_replace("-Inf", "+")
raw_names[1:(length(boundaries)-1)]
}
expression_bin_names <- make_bin_names(expression_bin_boundaries)
mend_depth_bin_names <- make_bin_names(mend_depth_bin_boundaries/1e6)
length_bin_names <- make_bin_names(length_bin_boundaries)
expression_bin <- cut(exp, expression_bin_boundaries,
labels = expression_bin_names, include.lowest = TRUE)
length_bin_names
View(pge)
pge_with_bins <- pge %>%
mutate(Expression_bin = cut(Expression, expression_bin_boundaries,
labels = expression_bin_names, include.lowest = TRUE),
MEND_bin = cut(MEND_depth, mend_depth_bin_boundaries,
labels = mend_depth_bin_names, include.lowest = TRUE),
length_bin = cut(effective_length, length_bin_boundaries,
labels = length_bin_names, include.lowest = TRUE))
pge_with_bins <- pge %>%
mutate(Expression_bin = cut(expression_at_max_depth, expression_bin_boundaries,
labels = expression_bin_names, include.lowest = TRUE),
MEND_bin = cut(UMEND/1e6, mend_depth_bin_boundaries,
labels = mend_depth_bin_names, include.lowest = TRUE),
length_bin = cut(effective_gene_length, length_bin_boundaries,
labels = length_bin_names, include.lowest = TRUE))
View(pge_with_bins)
pge_with_bins <- pge %>%
mutate(Expression_bin = cut(expression_at_max_depth, expression_bin_boundaries,
labels = expression_bin_names, include.lowest = TRUE),
MEND_bin = cut(UMEND, mend_depth_bin_boundaries,
labels = mend_depth_bin_names, include.lowest = TRUE),
length_bin = cut(effective_gene_length, length_bin_boundaries,
labels = length_bin_names, include.lowest = TRUE))
bin_check <- bulk_results %>%
group_by(Expression_bin, MEND_bin, length_bin) %>%
summarize(n_entries_per_bin = n())
bin_check <- pge_with_bins %>%
group_by(Expression_bin, MEND_bin, length_bin) %>%
summarize(n_entries_per_bin = n())
View(bin_check)
nrow(bin_check)
(length(expression_bin_boundaries)-1) *
(length(mend_depth_bin_boundaries)-1) *
(length(length_bin_boundaries)-1)
# What size are bins?
bin_check %>%
pull(n_entries_per_bin) %>%
summary
# What size are bins?
ggplot(bin_check) + geom_histogram(aes(x=n_entries_per_bin))
length(bin_check$n_entries_per_bin < 100)
count(bin_check$n_entries_per_bin < 100)
sum(bin_check$n_entries_per_bin < 100)
sum(bin_check$n_entries_per_bin < 50) #65
sum(bin_check$n_entries_per_bin < 20) #39
65/468
bin_check <- pge_with_bins %>%
group_by(Expression_bin, MEND_bin, length_bin) %>%
summarize(n_entries_per_bin = n(),
n_samples = count(unique(parent_id)))
bin_check <- pge_with_bins %>%
group_by(Expression_bin, MEND_bin, length_bin) %>%
summarize(n_entries_per_bin = n(),
n_samples = n(unique(parent_id)))
bin_check <- pge_with_bins %>%
group_by(Expression_bin, MEND_bin, length_bin) %>%
summarize(n_entries_per_bin = n(),
n_samples = length(unique(parent_id)))
sum(bin_check$n_samples < 5)
sum(bin_check$n_samples < 4) #13
sum(bin_check$n_samples < 4) #13
sum(bin_check$n_samples < 3) #13
13/468
39/468
library(readr)
library(jsonlite)
library(magrittr)
library(dplyr)
library(tidyr)
library(knitr)
library(stringr)
sample_id <- params$Sample
outlier_lead <- params$Gene
exp <- params$Expression
threshold <- params$Threshold
type <- params$Type
mend_depth <- params$Depth
gene_length <- params$Length
# start scratch (uncomment this to manually set things to run code)
# sample_id <- "TH_Eval_014_est10M_UMEND_seqtk_seed_8652"
# outlier_lead <- "SGCA"
# exp <- 3.6
# threshold <- 3.5
# type <- "Up"
# mend_depth <- 1000000
# gene_length <- 100
# end scratch
if (exp >= 20) {
stop("expression >= 20. make sure your expression is in log2(TPM+1)")
}
sample_id <- "TH_Eval_014_est10M_UMEND_seqtk_seed_8652"
outlier_lead <- "SGCA"
exp <- 3.6
threshold <- 3.5
type <- "Up"
mend_depth <- 1000000
gene_length <- 100
if (exp >= 20) {
stop("expression >= 20. make sure your expression is in log2(TPM+1)")
}
expression_bin_boundaries <- c(0, 1, 3, 5, 7, 10, 20)
mend_depth_bin_boundaries <- c(0, seq(2, 46, 4), Inf)*1E6
length_bin_boundaries <- c(0, 100, 250, 400, 600, 900, 1200, 1500, 2000, 3000, 4000, Inf)
make_bin_names <- function(boundaries = 1:10){
raw_names <- paste0(boundaries, "-", lead(boundaries)) %>% str_replace("-Inf", "+")
raw_names[1:(length(boundaries)-1)]
}
expression_bin_names <- make_bin_names(expression_bin_boundaries)
mend_depth_bin_names <- make_bin_names(mend_depth_bin_boundaries/1e6)
length_bin_names <- make_bin_names(length_bin_boundaries)
expression_bin <- cut(exp, expression_bin_boundaries,
labels = expression_bin_names, include.lowest = TRUE)
mend_depth_bin <- cut(mend_depth, mend_depth_bin_boundaries,
labels = mend_depth_bin_names, include.lowest = TRUE)
length_bin <- cut(gene_length, length_bin_boundaries,
labels = length_bin_names, include.lowest = TRUE)
threshold <- as.numeric(threshold)
exp <- as.numeric(exp)
summary <- tibble(sample = sample_id,
gene = outlier_lead,
type = type,
expression = exp,
threshold = threshold,
mend_depth = mend_depth,
gene_length = gene_length)
# Calculate percent difference
summary <- summary %>%
mutate(percent_difference = 100 * ((abs(expression - threshold)) / expression))
if (!(is.na(summary$percent_difference))) {
# Set accuracy threshold and get accuracy info
non_zero_abundance <- per_gene_expression_info %>%
mutate(within_accuracy_threshold_of_deepest_val =
expression > (1 - summary$percent_difference / 100) * expression_at_max_depth &
expression < (1 + summary$percent_difference / 100) * expression_at_max_depth)
# Make expression bins and generate summary statistics
abundance_by_expression_bin <- non_zero_abundance %>%
ungroup() %>%
mutate(expression_level_bin = cut(expression_at_max_depth, expression_bin_boundaries,
labels = expression_bin_names, include.lowest = TRUE),
effective_gene_length_bin = cut(effective_gene_length, length_bin_boundaries,
labels = length_bin_names, include.lowest = TRUE),
depth_bin = cut(UMEND, mend_depth_bin_boundaries,
labels = mend_depth_bin_names, include.lowest = TRUE))
abundance_stats <- abundance_by_expression_bin	%>%
group_by(expression_level_bin, depth_bin, effective_gene_length_bin, parent_id) %>%
summarize(pct_accurately_measured = sum(within_accuracy_threshold_of_deepest_val) / n(),
n_genes_in_bin = length(unique(gene)),
n_measurements_in_bin = n())
}
per_gene_expression_info <- pge
if (!(is.na(summary$percent_difference))) {
# Set accuracy threshold and get accuracy info
non_zero_abundance <- per_gene_expression_info %>%
mutate(within_accuracy_threshold_of_deepest_val =
expression > (1 - summary$percent_difference / 100) * expression_at_max_depth &
expression < (1 + summary$percent_difference / 100) * expression_at_max_depth)
# Make expression bins and generate summary statistics
abundance_by_expression_bin <- non_zero_abundance %>%
ungroup() %>%
mutate(expression_level_bin = cut(expression_at_max_depth, expression_bin_boundaries,
labels = expression_bin_names, include.lowest = TRUE),
effective_gene_length_bin = cut(effective_gene_length, length_bin_boundaries,
labels = length_bin_names, include.lowest = TRUE),
depth_bin = cut(UMEND, mend_depth_bin_boundaries,
labels = mend_depth_bin_names, include.lowest = TRUE))
abundance_stats <- abundance_by_expression_bin	%>%
group_by(expression_level_bin, depth_bin, effective_gene_length_bin, parent_id) %>%
summarize(pct_accurately_measured = sum(within_accuracy_threshold_of_deepest_val) / n(),
n_genes_in_bin = length(unique(gene)),
n_measurements_in_bin = n())
}
View(abundance_stats)
if (!(is.null(abundance_stats))) {
stats_filtered <- abundance_stats %>%
ungroup %>%
filter((depth_bin == mend_depth_bin) &
(expression_level_bin == expression_bin) &
(effective_gene_length_bin == length_bin)) %>%
arrange(parent_id)
}
View(stats_filtered)
summary <- summary %>%
mutate(
avg = mean(stats_filtered$pct_accurately_measured),
min = min(stats_filtered$pct_accurately_measured),
max = max(stats_filtered$pct_accurately_measured),
S1 = stats_filtered$pct_accurately_measured[1],
S2 = stats_filtered$pct_accurately_measured[2],
S3 = stats_filtered$pct_accurately_measured[3],
S4 = stats_filtered$pct_accurately_measured[4],
S5 = stats_filtered$pct_accurately_measured[5]
)
summary <- add_column(summary, prob95 = summary$avg >= 0.95, .after = "percent_difference")
# Clean up names for writing to outfile
names(summary) <- gsub("_", " ", str_to_sentence(names(summary)))
summary <- summary %>%
rename("Probability >= 0.95" = Prob95,
"Probability of being an outlier" = Avg,
"Minimum Probability" = Min,
"Maximum Probability" = Max,
"Sample 1 Probability" = S1,
"Sample 2 Probability" = S2,
"Sample 3 Probability" = S3,
"Sample 4 Probability" = S4,
"Sample 5 Probability" = S5)
# Write to outfile
if ( ! dir.exists(paste0("results/", sample_id))) dir.create(paste0("results/", sample_id))
write_tsv(summary, paste0("results/", sample_id, "/sample_", sample_id, "__gene_", outlier_lead, "__summary.tsv"))
# Show short summary table & long summary table
kable(summary[1:10], digits = 4)
kable(summary, digits = 4)
sum(stats_filtered$n_measurements_in_bin)
# If there are fewer than 100 measurements considered, print a warning message
if (sum(stats_filtered$n_measurements_in_bin) < 100) {
print("Warning: this outlier probability estimate is based on <100 similar measurements")
}
# If there were not data for all 5 parent samples, print a warning message
if (nrow(stats_filtered) < 5) {
print("Warning: the mean accuracy was calculated using <5 sample accuracies")
}
if (exp >= 20) {
stop("expression >= 20. make sure your expression is in log2(TPM+1)")
}
expression_bin_boundaries <- c(0, 1, 3, 5, 7, 10, 20)
mend_depth_bin_boundaries <- c(0, seq(2, 46, 4), Inf)*1E6
length_bin_boundaries <- c(0, 100, 450, 800, 1500, 4000, Inf)
make_bin_names <- function(boundaries = 1:10){
raw_names <- paste0(boundaries, "-", lead(boundaries)) %>% str_replace("-Inf", "+")
raw_names[1:(length(boundaries)-1)]
}
expression_bin_names <- make_bin_names(expression_bin_boundaries)
mend_depth_bin_names <- make_bin_names(mend_depth_bin_boundaries/1e6)
length_bin_names <- make_bin_names(length_bin_boundaries)
expression_bin <- cut(exp, expression_bin_boundaries,
labels = expression_bin_names, include.lowest = TRUE)
mend_depth_bin <- cut(mend_depth, mend_depth_bin_boundaries,
labels = mend_depth_bin_names, include.lowest = TRUE)
length_bin <- cut(gene_length, length_bin_boundaries,
labels = length_bin_names, include.lowest = TRUE)
# Start building summary table
threshold <- as.numeric(threshold)
exp <- as.numeric(exp)
summary <- tibble(sample = sample_id,
gene = outlier_lead,
type = type,
expression = exp,
threshold = threshold,
mend_depth = mend_depth,
gene_length = gene_length)
# Calculate percent difference
summary <- summary %>%
mutate(percent_difference = 100 * ((abs(expression - threshold)) / expression))
# Get accuracy distributions
if (!(is.na(summary$percent_difference))) {
# Set accuracy threshold and get accuracy info
non_zero_abundance <- per_gene_expression_info %>%
mutate(within_accuracy_threshold_of_deepest_val =
expression > (1 - summary$percent_difference / 100) * expression_at_max_depth &
expression < (1 + summary$percent_difference / 100) * expression_at_max_depth)
# Make expression bins and generate summary statistics
abundance_by_expression_bin <- non_zero_abundance %>%
ungroup() %>%
mutate(expression_level_bin = cut(expression_at_max_depth, expression_bin_boundaries,
labels = expression_bin_names, include.lowest = TRUE),
effective_gene_length_bin = cut(effective_gene_length, length_bin_boundaries,
labels = length_bin_names, include.lowest = TRUE),
depth_bin = cut(UMEND, mend_depth_bin_boundaries,
labels = mend_depth_bin_names, include.lowest = TRUE))
abundance_stats <- abundance_by_expression_bin	%>%
group_by(expression_level_bin, depth_bin, effective_gene_length_bin, parent_id) %>%
summarize(pct_accurately_measured = sum(within_accuracy_threshold_of_deepest_val) / n(),
n_genes_in_bin = length(unique(gene)),
n_measurements_in_bin = n())
}
# Filter results
if (!(is.null(abundance_stats))) {
stats_filtered <- abundance_stats %>%
ungroup %>%
filter((depth_bin == mend_depth_bin) &
(expression_level_bin == expression_bin) &
(effective_gene_length_bin == length_bin)) %>%
arrange(parent_id)
}
# Get accuracy stats
summary <- summary %>%
mutate(
avg = mean(stats_filtered$pct_accurately_measured),
min = min(stats_filtered$pct_accurately_measured),
max = max(stats_filtered$pct_accurately_measured),
S1 = stats_filtered$pct_accurately_measured[1],
S2 = stats_filtered$pct_accurately_measured[2],
S3 = stats_filtered$pct_accurately_measured[3],
S4 = stats_filtered$pct_accurately_measured[4],
S5 = stats_filtered$pct_accurately_measured[5]
)
# Add column that checks if probability >= 0.95
summary <- add_column(summary, prob95 = summary$avg >= 0.95, .after = "percent_difference")
# Clean up names for writing to outfile
names(summary) <- gsub("_", " ", str_to_sentence(names(summary)))
summary <- summary %>%
rename("Probability >= 0.95" = Prob95,
"Probability of being an outlier" = Avg,
"Minimum Probability" = Min,
"Maximum Probability" = Max,
"Sample 1 Probability" = S1,
"Sample 2 Probability" = S2,
"Sample 3 Probability" = S3,
"Sample 4 Probability" = S4,
"Sample 5 Probability" = S5)
# Write to outfile
if ( ! dir.exists(paste0("results/", sample_id))) dir.create(paste0("results/", sample_id))
write_tsv(summary, paste0("results/", sample_id, "/sample_", sample_id, "__gene_", outlier_lead, "__summary.tsv"))
# Show short summary table & long summary table
kable(summary[1:10], digits = 4)
kable(summary, digits = 4)
# If there are fewer than 100 measurements considered, print a warning message
if (sum(stats_filtered$n_measurements_in_bin) < 100) {
print("Warning: this outlier probability estimate is based on <100 similar measurements")
}
# If there were not data for all 5 parent samples, print a warning message
if (nrow(stats_filtered) < 5) {
print("Warning: the mean accuracy was calculated using <5 sample accuracies")
}
length_bin
