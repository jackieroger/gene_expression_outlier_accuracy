select(Sample, Gene, Type, Expression,
Threshold, MEND_depth = `Mend depth`,
effective_length = `Gene length`,
Mean_Accuracy = `Probability of being an outlier`) %>%
mutate(`Percent difference` = 100 * ((abs(Expression - Threshold)) / Expression)) %>%
drop_na(Mean_Accuracy)
# Results including NAs
gathered_results_with_nas <- gathered_results_raw %>%
select(Sample, Gene, Type, Expression,
Threshold, MEND_depth = `Mend depth`,
effective_length = `Gene length`,
Mean_Accuracy = `Probability of being an outlier`) %>%
mutate(`Percent difference` = 100 * ((abs(Expression - Threshold)) / Expression))
expression_bin_boundaries <- c(0, 1, 3, 5, 7, 10, 20)
mend_depth_bin_boundaries <- c(0, seq(2, 46, 4), Inf)*1E6
length_bin_boundaries <- c(0, 100, 450, 800, 1500, 4000, Inf)
make_bin_names <- function(boundaries = 1:10){
raw_names <- paste0(boundaries, "-", lead(boundaries)) %>% str_replace("-Inf", "+")
raw_names[1:(length(boundaries)-1)]
}
expression_bin_names <- make_bin_names(expression_bin_boundaries)
mend_depth_bin_names <- make_bin_names(mend_depth_bin_boundaries/1e6)
length_bin_names <- make_bin_names(length_bin_boundaries)
bulk_results <- gathered_results %>%
mutate(Expression_bin = cut(Expression, expression_bin_boundaries,
labels = expression_bin_names,
include.lowest = TRUE),
MEND_bin = cut(MEND_depth, mend_depth_bin_boundaries, labels = mend_depth_bin_names),
length_bin = cut(effective_length, length_bin_boundaries, labels = length_bin_names,
include.lowest = TRUE)
)
# Results including NAs
bulk_results_with_nas <- gathered_results_with_nas %>%
mutate(Expression_bin = cut(Expression, expression_bin_boundaries,
labels = expression_bin_names,
include.lowest = TRUE),
MEND_bin = cut(MEND_depth, mend_depth_bin_boundaries, labels = mend_depth_bin_names),
length_bin = cut(effective_length, length_bin_boundaries, labels = length_bin_names,
include.lowest = TRUE)
)
print("How many bins are possible?")
(length(expression_bin_boundaries)-1) * (length(mend_depth_bin_boundaries)-1) * (length(length_bin_boundaries)-1)
bin_check <- bulk_results %>%
group_by(Expression_bin, MEND_bin, length_bin) %>%
summarize(n_entries_per_bin = n())
print("How many bins contain entries in this data?")
nrow(bin_check)
print("What is the range of the number of entries per bin?")
bin_check %>%
pull(n_entries_per_bin) %>%
summary
# What size are bins?
ggplot(bin_check) +
geom_histogram(aes(x=n_entries_per_bin)) +
ggtitle("Entries per bin")
#
# # Which bins have only one entry?
# subset(bin_check, n_entries_per_bin == 1)
print("How many bins have between 1 and 99 results?")
length(which(bin_check$n_entries_per_bin > 0 & bin_check$n_entries_per_bin < 100))
print("How many detected outlier genes total are being analyzed?")
sum(bin_check$n_entries_per_bin)
# Get numbers before excluding NAs
bin_check_with_nas <- bulk_results_with_nas %>%
group_by(Expression_bin, MEND_bin, length_bin) %>%
summarize(n_entries_per_bin = n())
print("How many bins contain entries in this data?")
nrow(bin_check_with_nas)
print("How many bins have between 1 and 99 results?")
length(which(bin_check_with_nas$n_entries_per_bin > 0 & bin_check_with_nas$n_entries_per_bin < 100))
dim(bulk_results)
dim(is.na(bulk_results))
sum(is.na(bulk_results$Mean_Accuracy))
just_MEND_depths <- bulk_results %>%
select(Sample, MEND_depth)
ggplot(just_MEND_depths) +
geom_histogram(aes(x=MEND_depth/1E6))
range(just_MEND_depths$MEND_depth/1e6)
range(summary(just_MEND_depths$MEND_depth/1e6))
# Histogram of number of outlier leads per sample (split by outlier type & fill is depth)
num_leads <- bulk_results %>% group_by(Sample, Type, MEND_bin) %>% tally()
plot1 <- ggplot(num_leads, aes(x=n, fill=as.factor(MEND_bin))) +
geom_histogram() +
facet_wrap(~Type) +
ggtitle("Number of outlier leads per sample")
plot1
# Make sure (depth, expression, length) bins are relatively similar sizes
all_bins <- bulk_results %>% tabyl(MEND_bin, Expression_bin, length_bin)
all_bins
print("How many outliers had >95% accuracy?")
length(which(bulk_results$Mean_Accuracy > 0.95))
print("What percent of outliers had >95% accuracy?")
100*length(which(bulk_results$Mean_Accuracy > 0.95))/nrow(bulk_results)
plot2 <- ggplot(bulk_results, aes(x=Mean_Accuracy)) +
geom_histogram() +
facet_wrap(~MEND_bin) +
ggtitle("Spectrum of accuracies by MEND depth")
plot2
plot3 <- ggplot(bulk_results, aes(x=Mean_Accuracy)) +
geom_histogram() +
facet_wrap(~Expression_bin) +
ggtitle("Spectrum of accuracies by expression level")
plot3
plot4 <- ggplot(bulk_results, aes(x=Mean_Accuracy)) +
geom_histogram() +
facet_wrap(~length_bin) +
ggtitle("Spectrum of accuracies by effective gene length")
plot4
# Outliers with probability < 0.05
low_acc_ups <- subset(bulk_results, Mean_Accuracy < 0.05)
# How many are there?
nrow(low_acc_ups)
# What percent are short & low exp?
100*length(which(low_acc_ups$Expression_bin == "0-1" & low_acc_ups$length_bin == "0-100"))/nrow(low_acc_ups)
bulk_results$Type <- factor(bulk_results$Type, levels = c("Up", "Down"))
acc_overview <- ggplot(bulk_results, aes(x=Mean_Accuracy, color=Type)) +
geom_histogram(fill="white", binwidth = 0.05) +
facet_wrap(~Type, scales="free") +
scale_color_brewer(palette = "Set1") +
theme_bw() +
xlab("Accuracy") +
ylab("Gene expression measurements") +
ggtitle("Accuracies of up and down outlier gene expression measurements")
acc_overview
ggsave("../figures/accuracies_all.png", acc_overview)
bulk_results$Type <- factor(bulk_results$Type, levels = c("Up", "Down"))
acc_overview <- ggplot(bulk_results, aes(x=Mean_Accuracy, color=Type)) +
geom_histogram(fill="white", binwidth = 0.05) +
facet_wrap(~Type, scales="free") +
scale_color_brewer(palette = "Set1") +
theme_bw() +
xlab("Accuracy") +
ylab("Gene expression measurements") +
ggtitle("Accuracies of up and down outlier gene expression measurements")
acc_overview
ggsave("../figures/accuracies_all.png", acc_overview)
bulk_results$Type <- factor(bulk_results$Type, levels = c("Up", "Down"))
acc_overview <- ggplot(bulk_results, aes(x=Mean_Accuracy, color=Type)) +
geom_histogram(fill="white", binwidth = 0.05) +
facet_wrap(~Type, scales="free") +
scale_color_brewer(palette = "Set1") +
theme_bw() +
xlab("Accuracy") +
ylab("Gene expression measurements") +
ggtitle("Accuracies of up and down outlier gene expression measurements")
acc_overview
ggsave("../figures/accuracies_all.png", acc_overview)
figure1_data <- bulk_results %>%
mutate(exp_gt5 = Expression >= 5,
depth_gt20 = MEND_bin >= 20,
length_gt1000 = effective_length >= 1000)
# Expression above or below 5
ggplot(subset(figure1_data, Type == "Up"), aes(x=exp_gt5, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Exp >= 5", "FALSE"="Exp < 5")) +
ylab("Accuracy") +
xlab("Expression above or below 5 log2(TPM+1)") +
ggtitle("Accuracies of up outliers with high and low gene expression")
ggsave("..//figures/accuracies_up_exp.png")
ggplot(subset(figure1_data, Type == "Down"), aes(x=exp_gt5, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Exp >= 5", "FALSE"="Exp < 5")) +
ylab("Accuracy") +
xlab("Gene expression above or below 5 log2(TPM+1)") +
ggtitle("Accuracies of down outliers with high and low gene expression")
ggsave("..//figures/accuracies_down_exp.png")
# Depth above or below 20
ggplot(subset(figure1_data, Type == "Up"), aes(x=depth_gt20, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Depth >= 20", "FALSE"="Depth < 20")) +
ylab("Accuracy") +
xlab("MEND depth above or below 20 million MEND reads") +
ggtitle("Accuracies of up outliers with high and low MEND read depth")
ggsave("..//figures/accuracies_up_depth.png")
ggplot(subset(figure1_data, Type == "Down"), aes(x=depth_gt20, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Depth >= 20", "FALSE"="Depth < 20")) +
ylab("Accuracy") +
xlab("MEND depth above or below 20 million MEND reads") +
ggtitle("Accuracies of down outliers with high and low MEND read depth")
ggsave("..//figures/accuracies_down_depth.png")
# Length above or below 1000
ggplot(subset(figure1_data, Type == "Up"), aes(x=length_gt1000, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Length >= 1000", "FALSE"="Length < 1000")) +
ylab("Accuracy") +
xlab("Gene length above or below 1000 base pairs") +
ggtitle("Accuracies of up outliers with high and low effective gene length")
ggsave("..//figures/accuracies_up_length.png")
ggplot(subset(figure1_data, Type == "Down"), aes(x=length_gt1000, y=Mean_Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw() +
scale_x_discrete(labels=c("TRUE"="Length >= 1000", "FALSE"="Length < 1000")) +
ylab("Accuracy") +
xlab("Gene length above or below 1000 base pairs") +
ggtitle("Accuracies of down outliers with high and low effective gene length")
ggsave("..//figures/accuracies_down_length.png")
# StatBin2 allows depiction of empty bins as blank instead of a horizontal line:
# https://stackoverflow.com/questions/57128090/remove-baseline-color-for-geom-histogram
StatBin2 <- ggproto(
"StatBin2",
StatBin,
compute_group = function (data, scales, binwidth = NULL, bins = NULL,
center = NULL, boundary = NULL,
closed = c("right", "left"), pad = FALSE,
breaks = NULL, origin = NULL, right = NULL,
drop = NULL, width = NULL) {
if (!is.null(breaks)) {
if (!scales$x$is_discrete()) {
breaks <- scales$x$transform(breaks)
}
bins <- ggplot2:::bin_breaks(breaks, closed)
}
else if (!is.null(binwidth)) {
if (is.function(binwidth)) {
binwidth <- binwidth(data$x)
}
bins <- ggplot2:::bin_breaks_width(scales$x$dimension(), binwidth,
center = center, boundary = boundary,
closed = closed)
}
else {
bins <- ggplot2:::bin_breaks_bins(scales$x$dimension(), bins,
center = center, boundary = boundary,
closed = closed)
}
res <- ggplot2:::bin_vector(data$x, bins, weight = data$weight, pad = pad)
# drop 0-count bins completely before returning the dataframe
res <- res[res$count > 0, ]
res
})
summary(bulk_results$`Percent difference`)
summary(bulk_results$MEND_depth)
summary(bulk_results$effective_length)
summary(bulk_results$Expression)
median(bulk_results$`Percent difference`)
median(bulk_results$MEND_depth)
median(bulk_results$effective_length)
median(bulk_results$Expression)
ggplot(bulk_results) +
geom_point(aes(x=MEND_depth/1e6, y=Mean_Accuracy)) +
facet_wrap(~Type)
ggplot(bulk_results) +
geom_point(aes(x=effective_length, y=Mean_Accuracy)) +
facet_wrap(~Type) +
xlim(0, 25000)
ggplot(bulk_results) +
geom_point(aes(x=Expression, y=Mean_Accuracy)) +
facet_wrap(~Type)
# to get hex codes from palette
# library(RColorBrewer)
# brewer.pal(12, "Set1")
type_colors = c(Up = "#E41A1C", Down = "#377EB8")
bulk_results$Type <- factor(bulk_results$Type, levels = c("Up", "Down"))
acc_overview <- ggplot(bulk_results, aes(x=Mean_Accuracy, color=Type)) +
geom_histogram(fill="white", stat = StatBin2) +
facet_wrap(~Type, scales="free") +
theme_bw() +
scale_color_manual(values = type_colors) +
theme(legend.position="none") +
xlab("") +
ylab("Gene\nexpression\nmeasurements")
figure1_data_v2 <- bind_rows(
bulk_results %>%
filter(Expression > quantile(Expression, 0.75)) %>%
mutate(set = paste0("Expression>", round(quantile(Expression, 0.75), 1), " Log2(TPM+1)")),
bulk_results %>%
filter(Expression < quantile(Expression, 0.25)) %>%
mutate(set = paste0("Expression<", round(quantile(Expression, 0.25), 1), " Log2(TPM+1)")),
bulk_results %>%
filter(MEND_depth > quantile(MEND_depth, 0.75)) %>%
mutate(set = paste0("Depth>", round(quantile(MEND_depth, 0.75)/1e6), "M MEND reads")),
bulk_results %>%
filter(MEND_depth < quantile(MEND_depth, 0.25)) %>%
mutate(set = paste0("Depth<", round(quantile(MEND_depth, 0.25)/1e6), "M MEND reads")),
bulk_results %>%
filter(effective_length > quantile(effective_length, 0.75)) %>%
mutate(set = paste0("Length>", round(quantile(effective_length, 0.75)/1000, 1), "kb")),
bulk_results %>%
filter(effective_length < quantile(effective_length, 0.25)) %>%
mutate(set = paste0("Length<", round(quantile(effective_length, 0.25)/1000, 1), "kb")),
bulk_results %>%
filter(`Percent difference` > quantile(`Percent difference`, 0.75)) %>%
mutate(set = paste0("Difference>", round(quantile(`Percent difference`, 0.75), 1), "%")),
bulk_results %>%
filter(`Percent difference` < quantile(`Percent difference`, 0.25)) %>%
mutate(set = paste0("Difference<", round(quantile(`Percent difference`, 0.25), 1), "%"))
)
boxplot_n_labels <- figure1_data_v2 %>%
group_by(set, Type) %>%
summarize(set_type_label = paste0("n=", scales::label_comma()(n())))
all_boxplots <- ggplot(figure1_data_v2, aes(y=set, x=Mean_Accuracy, fill = Type)) +
geom_boxplot(outlier.size = 0.5) +
geom_text(data = boxplot_n_labels,
#aes(x=0.50, y=set, label = set_type_label), vjust = -1, size = 3) +
aes(x=0, y=set, label = set_type_label), vjust = -0.5, hjust = 0, size = 3) +
theme_bw() +
scale_fill_manual(values = type_colors) +
scale_color_manual(values = type_colors) +
facet_wrap(~Type, ncol = 2) +
theme(legend.position="none") +
ylab("")
all_boxplots
combined_image <- plot_grid(acc_overview, all_boxplots, ncol = 1, rel_heights = c(1,2), align = "v",
labels = "AUTO")
combined_image
ggsave("../figures/fig1.png", combined_image)
# Average number of up and down outliers per sample
mean(subset(num_leads, Type == "Up")$n)
mean(subset(num_leads, Type == "Down")$n)
median(subset(num_leads, Type == "Up")$n)
median(subset(num_leads, Type == "Down")$n)
# Average accuracies of up and down outliers per sample
mean(subset(figure1_data, Type == "Up" & !is.na(Mean_Accuracy))$Mean_Accuracy)
mean(subset(figure1_data, Type == "Down" & !is.na(Mean_Accuracy))$Mean_Accuracy)
median(subset(figure1_data, Type == "Up" & !is.na(Mean_Accuracy))$Mean_Accuracy)
median(subset(figure1_data, Type == "Down" & !is.na(Mean_Accuracy))$Mean_Accuracy)
# Fraction of accuracies above 95%
count(subset(figure1_data, Type == "Up" & Mean_Accuracy>95)) /
count(subset(figure1_data, Type == "Up"))
count(subset(figure1_data, Type == "Down" & Mean_Accuracy>95)) /
count(subset(figure1_data, Type == "Down"))
count(subset(figure1_data, Mean_Accuracy>95)) /
count(figure1_data)
# the bump in distribution due to the 0-1 crowd
median(subset(figure1_data, Expression_bin == "0-1")$Mean_Accuracy)
install.packages("pander")
View(boxplot_n_labels)
View(figure1_data_v2)
pd_results <- figure1_data_v2 %>%
filter(set == "Difference>100%" | set == "Difference<2.3%")
View(pd_results)
ggplot(pd_results) %>%
geom_point(aes(x=`Percent difference`, y=Mean_Accuracy)) +
facet_wrap(~set)
ggplot(pd_results) +
geom_point(aes(x=`Percent difference`, y=Mean_Accuracy)) +
facet_wrap(~set)
View(figure1_data_v2)
pd_results <- figure1_data_v2 %>%
filter(set == "Difference>100%" | set == "Difference<2.2%")
ggplot(pd_results) +
geom_point(aes(x=`Percent difference`, y=Mean_Accuracy)) +
facet_wrap(~set)
ggplot(pd_results) +
geom_point(aes(x=`Percent difference`, y=Mean_Accuracy)) +
facet_wrap(~set, scales="free")
summary(pd2$Mean_Accuracy)
pd2 <- figure1_data_v2 %>%
filter(set == "Difference<2.2%")
pd100 <- figure1_data_v2 %>%
filter(set == "Difference>100%")
summary(pd2$Mean_Accuracy)
summary(pd2$Mean_Accuracy)
summary(pd2$Expression)
summary(pd2$MEND_depth)
summary(pd2$Mean_Accuracy)
summary(pd2$Expression)
summary(pd100$Mean_Accuracy)
summary(pd100$Expression)
summary(pd100$Mean_Accuracy[Type == "Up"])
print("pd2 summary")
summary(pd2$Mean_Accuracy)
summary(pd2$Expression)
print("pd100 summary")
summary(pd100$Mean_Accuracy)
summary(pd100$Expression)
print("pd2 up summary")
summary(pd100$Mean_Accuracy[pd100$Type == "Up"])
summary(pd100$Expression[pd100$Type == "Up"])
print("pd2 down summary")
summary(pd100$Mean_Accuracy[pd100$Type == "Down"])
summary(pd100$Expression[pd100$Type == "Down"])
library(tidyverse)
library(janitor)
# samples <-
#   list.files(path = "TH_Eval_014_est10M_UMEND_seqtk_seed_8652",
#              pattern = "summary.tsv",
#              recursive = TRUE)
# accuracy_results_raw <- lapply(samples,
#                                function(x)
#                                  read_tsv(
#                                    file.path("TH_Eval_014_est10M_UMEND_seqtk_seed_8652", x),
#                                    col_types = cols(.default = "c")
#                                  )) %>% bind_rows
accuracy_results_raw <- read_tsv("outlier_probability_output_TH_Eval_14_2020_12_07.tsv.gz") %>%
rename(Mean_Accuracy = `Probability of being an outlier`)
input_data <- read_tsv("outlier_probability_input_TH_Eval_14_2020_07_13.tsv")
confirmed_calls <- input_data %>%
filter(sample_id == "TH_Eval_014_est40M_UMEND_seqtk_seed_4956") %>%
mutate(concordant = TRUE) %>%
select(Gene, Type, concordant)
accuracy_results <- merge(
accuracy_results_raw %>%
filter(Sample != "TH_Eval_014_est40M_UMEND_seqtk_seed_4956"),
input_data %>% select(-sample_id),
by = c("Gene", "Type", "Expression", "Threshold")) %>%
rename_all( ~ str_replace_all(., ' ', '_')) %>%
mutate(depth_id = str_replace(Sample, "^.*est([0-9][0-9]*M).*$", "\\1")) %>%
type_convert %>%
left_join(confirmed_calls, by = c("Gene", "Type")) %>%
mutate(concordant = replace_na(concordant, FALSE))
table(accuracy_results$concordant, useNA = "always")
accuracy_results %>% tabyl(Type, concordant)
accuracy_results_for_plot <- accuracy_results %>%
group_by(concordant, Type) %>%
mutate(box_label = paste0(c("Discordant", "Concordant")[1+concordant], " (n=",n(), ")"))
ggplot(accuracy_results_for_plot) +
geom_boxplot(aes(
group = concordant,
x = box_label,
y = Mean_Accuracy,
fill = concordant)) +
facet_wrap(~Type, scales = "free_x") +
theme_bw() +
scale_fill_brewer(palette="Paired") +
#  scale_x_discrete(labels = c("TRUE" = "Concordant", "FALSE" = "Discordant")) +
ylab("Probability") +
xlab("") +
#  xlab("Concordance") +
theme(legend.position="none") +
ggtitle("Probabilities of concordant and discordant outlier calls")
ggsave("../../figures/concordance.png")
library(tidyverse)
library(janitor)
samples <- list.files(path = "TH_Eval_014_est10M_UMEND_seqtk_seed_8652", pattern = "summary.tsv", recursive = TRUE)
accuracy_results_raw <- lapply(samples,
function(x) read_tsv(file.path("TH_Eval_014_est10M_UMEND_seqtk_seed_8652", x), col_types = cols(.default = "c")) ) %>%
# %>%
#mutate(filename = x)) %>%
bind_rows
input_data <- read_tsv("outlier_probability_input_TH_Eval_14_2020_07_13.tsv")
# depth_data <- unique(input_data %>% select(sample_id, MEND))
# depth_data <- rename(depth_data, c("Sample"="sample_id", "MEND_depth" = "MEND"))
confirmed_calls <- input_data %>%
filter(sample_id == "TH_Eval_014_est40M_UMEND_seqtk_seed_4956") %>%
mutate(concordant = TRUE) %>%
select(Gene, Type, concordant)
accuracy_results <- merge(accuracy_results_raw %>%
filter(Sample != "TH_Eval_014_est40M_UMEND_seqtk_seed_4956"),
input_data %>% select(-sample_id),
by=c("Gene", "Type", "Expression", "Threshold")) %>%
rename_all(~str_replace_all(., ' ', '_')) %>%
mutate(depth_id = str_replace(Sample, "^.*est([0-9][0-9]*M).*$", "\\1")) %>%
type_convert %>%
left_join(confirmed_calls, by=c("Gene", "Type")) %>%
mutate(concordant = replace_na(concordant, FALSE))
View(accuracy_results_raw)
ggplot(accuracy_results) +
geom_histogram(aes(group=concordant, x=Mean_Accuracy, fill = concordant)) +
facet_wrap(~Type, ncol = 1) +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
ggplot(accuracy_results) +
geom_histogram(aes(group=concordant, x=Expression, fill = concordant)) +
facet_wrap(concordant~Type, ncol = 1) +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
ggplot(accuracy_results %>% filter(Type == "Up")) +
geom_histogram(aes(group=concordant, x=Expression, fill = concordant)) +
facet_wrap(concordant~Type, ncol = 1) +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
ggplot(accuracy_results %>% filter(Type == "Up")) +
geom_point(aes(x=Expression, y=Mean_Accuracy, fill = concordant)) +
facet_wrap(concordant~Type, ncol = 1) +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
ggplot(accuracy_results %>% filter(Type == "Down")) +
geom_point(aes(x=Expression, y=Mean_Accuracy, fill = concordant)) +
facet_wrap(concordant~Type, ncol = 1) +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
accuracy_results %>% tabyl(Type, concordant)
accuracy_results_for_plot <- accuracy_results %>%
group_by(concordant, Type) %>%
mutate(box_label = paste0(c("Discordant", "Concordant")[1+concordant], " (n=",n(), ")"))
ggplot(accuracy_results_for_plot) +
geom_boxplot(aes(
group = concordant,
x = box_label,
y = Mean_Accuracy,
fill = concordant)) +
facet_wrap(~Type, scales = "free_x") +
theme_bw() +
scale_fill_brewer(palette="Paired") +
#  scale_x_discrete(labels = c("TRUE" = "Concordant", "FALSE" = "Discordant")) +
ylab("Probability") +
xlab("") +
#  xlab("Concordance") +
theme(legend.position="none") +
ggtitle("Probabilities of concordant and discordant outlier calls")
ggsave("../../figures/concordance.png")
head(accuracy_results_raw)
accuracy_results_raw <- read_tsv("outlier_probability_output_TH_Eval_14_2020_12_07.tsv.gz") %>%
rename(Mean_Accuracy = `Probability of being an outlier`)
View(accuracy_results_raw)
View(input_data)
View(accuracy_results)
View(accuracy_results_for_plot)
summary(accuracy_results_for_plot$Mean_Accuracy)
